#!/bin/bash
# Function to print verbose output
verbose_echo() {
    if $VERBOSE; then
        verbose_echo "$1"
    fi
}

# Default value for verbose mode (false)
VERBOSE=false
APT_QUIET="-qqq"
GEN_QUIET="--quiet"

# Parse command-line arguments for verbose flag
for arg in "$@"; do
    case $arg in
        -v|--verbose)
        VERBOSE=true
		APT_QUIET=""
		GEN_QUIET=""
        shift
        ;;
    esac
done

echo "Installing required packages..."

# Make sure we are installing the latest packages
sudo apt $APT_QUIET update

# Installing dos2unix to make sure required-linux-packages is in the correct format.
REQUIRED_PKG="dos2unix"

PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $REQUIRED_PKG|grep "install ok installed")

verbose_echo Checking for $REQUIRED_PKG: "$PKG_OK"
if [ "" = "$PKG_OK" ]; then
	verbose_echo "No $REQUIRED_PKG. Setting up $REQUIRED_PKG."
	sudo apt $APT_QUIET --yes install $REQUIRED_PKG
else
	verbose_echo "$REQUIRED_PKG already installed! :)"
fi

dos2unix $GEN_QUIET required-linux-packages.txt
dos2unix $GEN_QUIET possible-libs-not-found.txt

# Install required linux packages
mapfile -t req_packages < "required-linux-packages.txt"

for line in "${req_packages[@]}"; do
	REQUIRED_PKG=$line

	PKG_OK=$(dpkg-query -W --showformat='${Status}\n' "$REQUIRED_PKG"|grep "install ok installed")

	verbose_echo Checking for "$REQUIRED_PKG": "$PKG_OK"
	if [ "" = "$PKG_OK" ]; then
		verbose_echo "No $REQUIRED_PKG. Setting up $REQUIRED_PKG."
		sudo apt --yes install "$REQUIRED_PKG"
	else
		verbose_echo "$REQUIRED_PKG already installed! :)"
	fi
done 

echo "Checking for possible library naming errors..."

mapfile -t lib_lines < "possible-libs-not-found.txt"

for line in "${lib_lines[@]}"; do
	LIB_TO_FIND=$line

	# Get the system architecture
	SYS_ARCH=$(dpkg-architecture -qDEB_HOST_MULTIARCH)

	# Construct the path to the lib
	LIBS_DIR="/usr/lib/$SYS_ARCH/"

	# Check if the directory exists
	LIB_SEARCH=$(find "$LIBS_DIR" -name "${LIB_TO_FIND:0: -2}*")
	if [ -n "$LIB_SEARCH" ]; then
		verbose_echo "Base library exists: ${LIB_TO_FIND:0: -2}... checking version"
		LIB_SEARCH=$(find "$LIBS_DIR" -name "$LIB_TO_FIND")

		if [ -n "$LIB_SEARCH" ]; then
			verbose_echo "Version matches :)"
		else
			verbose_echo "Version doesn't match, trying 1 version higher"
			LIB_UP_ONE_TO_FIND=${LIB_TO_FIND:0:-1}$((${LIB_TO_FIND: -1} + 1))

			LIB_SEARCH=$(find "$LIBS_DIR" -name "$LIB_UP_ONE_TO_FIND")

			if [ -n "$LIB_SEARCH" ]; then
				verbose_echo "One version higher found... adding symbolic link."
				sudo ln "$LIBS_DIR"/"$LIB_UP_ONE_TO_FIND" "$LIBS_DIR"/"$LIB_TO_FIND"
			else
				verbose_echo "$LIB_UP_ONE_TO_FIND not found! Check that the base lib (${LIB_TO_FIND:0: -5}) is installed!"
				exit 1
			fi
		fi 
	else
		verbose_echo "Base lib ${LIB_TO_FIND:0: -5} not found! Find the package it's included in and add it to required-linux-packages.txt"
		exit 1
	fi
done

echo "Setting up Posgresql..."

# check for postgres running
PG_STATUS=$(sudo service postgresql status|grep "online")
if [ "" == "$PG_STATUS" ]; then
	verbose_echo "Postgresql not started... starting"
	sudo service postgresql start
fi

verbose_echo "Postgresql started! :)"

# setup posgresql server and databse
DB_USER="nest_user"
DB_PASSWORD="burdsFlyAway10"
DB_NAME="burd_db"
PG_USR_EXIST=$(sudo -u postgres psql -c \\du|grep $DB_USER)
if [ "" == "$PG_USR_EXIST" ]; then
	verbose_echo "User $DB_USER not created!... creating user"
	sudo -u postgres createuser $DB_USER
	sudo -u postgres psql -c "ALTER USER $DB_USER WITH PASSWORD '$DB_PASSWORD';"
else
	verbose_echo "User $DB_USER already created! :)"
fi

PG_DB_EXIST=$(sudo -u postgres psql -c \\l|grep $DB_NAME)
if [ "" == "$PG_DB_EXIST" ]; then
	verbose_echo "Database ($DB_NAME) not created!... creating database"
	sudo -u postgres createdb -O $DB_USER $DB_NAME
else
	PROMPT="Database ($DB_NAME) found! Would you like to reset the current database?"
	echo "$PROMPT"
	while true; do
		read -rp "Enter \"Y\" or \"n/N\": " input
		if [[ "$input" == "Y" || "$input" =~ ^[nN]$ ]]; then
			break
		else
			verbose_echo "Invalid input. Please enter \"Y\" or \"n/N\."
		fi
	done

	if [ "$input" == "Y" ]; then
		verbose_echo "Resetting databse ($DB_NAME)!"
		sudo -u postgres dropdb $DB_NAME
		sudo -u postgres createdb -O $DB_USER $DB_NAME
	fi
fi

echo "Setting up python environment..."

# Set up python environment
python3 -m venv --clear env

# shellcheck source=/dev/null
source env/bin/activate

# get python packages
pip install -r requirements.txt $GEN_QUIET

deactivate

echo "Setup completed! :)"
