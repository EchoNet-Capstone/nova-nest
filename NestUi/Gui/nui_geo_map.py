import os

import json
from PySide6.QtWidgets import QVBoxLayout, QWidget, QLabel, QPushButton, QApplication
from PySide6.QtWebEngineWidgets import QWebEngineView
from PySide6.QtWebEngineCore import QWebEnginePage
from PySide6.QtWebChannel import QWebChannel
from PySide6.QtCore import QObject, Signal
import folium
from folium import Element
from ..Utils.nest_map import *

class WebEnginePage(QWebEnginePage):
    """ Custom WebEnginePage to capture JavaScript console messages in PyQt. """
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent            

    def javaScriptConsoleMessage(self, level, msg, line, sourceID):
        """ Capture console messages from JavaScript and send them to PyQt. """
        print(f"JavaScript Console [{level}]: {msg}")  # Debugging log
        if "coordinates" in msg:
            self.parent.handleConsoleMessage(msg)  # Send to PyQt handler

class NestGeoMapWidget(QWidget):
    """ PyQt Widget for displaying Folium map inside PyQt WebEngineView. """
    def __init__(self, parent=None):
        super().__init__(parent)
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()
        self.setLayout(layout)

        # Create QWebEngineView and set custom WebEnginePage
        self.web_view = QWebEngineView()
        self.web_page = WebEnginePage(self)
        self.web_view.setPage(self.web_page)

        # Load the map HTML generated by Python Folium
        map_html = self.get_html_map(True)
        self.web_view.setHtml(map_html)

        # Button to simulate interaction
        self.button = QPushButton("Select a Point")
        self.button.clicked.connect(self.button_clicked)
        
        # Label to display clicked coordinates
        self.label = QLabel("Click on a marker to get coordinates")
        
        layout.addWidget(self.web_view)
        layout.addWidget(self.button)
        layout.addWidget(self.label)
   
    def get_html_map(self, use_random_data=False):
        """ Generates an HTML map using Folium. """
        location_center = [51.7678, -0.00675564]
        folium_map = folium.Map(location=location_center, zoom_start=13)

        # Add Custom JavaScript Logging for Click Events
        folium_map = self.add_custom_js(folium_map)

        if use_random_data:
            # Generate random buoys (returns a list of `folium.Marker`)
            markers = generate_random_buoys(num_buoys=10)

            # ✅ Correctly iterate over the list instead of using `.iterrows()`
            for marker in markers:
                marker.add_to(folium_map)
        else:
            # Fetch actual buoys from API
            gdf = get_buoys()
            add_events_to_map(folium_map, gdf)  # Existing function for API markers

        # Save HTML for debugging
        map_html = folium_map._repr_html_()
        file_name = "clickable_map.html"
        with open(file_name, "w", encoding="utf-8") as file:
            file.write(map_html)
        print(f"✅ Clickable map saved to {os.path.abspath(file_name)}")

        return map_html
    def add_custom_js(self, map_object):
        """ Injects JavaScript to capture click events on markers. """
        custom_js = f"""
        {map_object.get_name()}.on("click", function(e) {{
            var data = JSON.stringify({{"coordinates": e.latlng}});
            console.log(data);
        }});
        """

        e = Element(custom_js)
        html = map_object.get_root()
        html.script.get_root().render()
        html.script._children[e.get_name()] = e

        return map_object

    def button_clicked(self):
        """ Handle button click event (placeholder for interaction). """
        print("Button Clicked - Waiting for user input on the map.")

    def handleConsoleMessage(self, msg):
        """ Extracts coordinates from JavaScript console log and updates PyQt UI. """
        data = json.loads(msg)
        lat = data['coordinates']['lat']
        lng = data['coordinates']['lng']
        coords_text = f"Latitude: {lat}, Longitude: {lng}"
        self.label.setText(coords_text)  # Update label in PyQt
        print(f"✅ Coordinates received: {coords_text}")
