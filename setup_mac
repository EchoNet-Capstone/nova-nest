#!/bin/zsh
# This script has been adapted for macOS (M1 Max) using zsh and Homebrew.

# Function to print verbose output
verbose_echo() {
    if [ "$VERBOSE" -eq 1 ]; then
        echo "$1"
    fi
}

my_prisma() {
    cd "$PROGRAM_DIR"
    CMD="prisma $@"
    if [ "$VERBOSE" -eq 0 ]; then
        CMD="$CMD > /dev/null"
    fi
    eval "$CMD"
    cd "$ROOT_DIR"
}

# Default value for verbose mode (false)
VERBOSE=0
# For Homebrew, we won’t use quiet flags by default
BREW_QUIET=""
GEN_QUIET="--quiet"
PRISMA_QUIET=""

# Parse command-line arguments for verbose flag
for arg in "$@"; do
    case $arg in
        -v|--verbose)
            VERBOSE=1
            BREW_QUIET=""
            GEN_QUIET=""
            PRISMA_QUIET=""
            shift
            ;;
    esac
done

ROOT_DIR=$(pwd)
PROGRAM_DIR="$ROOT_DIR/NestUi"
SETUP_IN_DR="$ROOT_DIR/setup_in"
SETUP_OUT_DIR="$ROOT_DIR/setup_out"

REQ_PCKGS_FILE="$SETUP_IN_DR/required_linux_packages.txt"
POSS_LIBS_FILE="$SETUP_IN_DR/possible_libs_not_found.txt"
USR_SETUP_FILE="$SETUP_IN_DR/postgres_burd_db_settings.txt"
PY_PCKGS_FILE="$SETUP_IN_DR/nestui_py_requirements.txt"

echo "Installing required packages..."

# Update Homebrew package lists
brew update

# Ensure dos2unix is installed (it’s available via Homebrew)
if ! brew ls --versions dos2unix > /dev/null; then
    verbose_echo "dos2unix not found. Installing dos2unix."
    brew install dos2unix
else
    verbose_echo "dos2unix already installed! :)"
fi

# Convert file line endings
dos2unix $GEN_QUIET "$REQ_PCKGS_FILE"
dos2unix $GEN_QUIET "$POSS_LIBS_FILE"

# Install required Homebrew packages
# (Note: You might need to update package names in $REQ_PCKGS_FILE if they differ from Homebrew’s.)
req_packages=($(cat "$REQ_PCKGS_FILE"))
for REQUIRED_PKG in "${req_packages[@]}"; do
    if ! brew ls --versions "$REQUIRED_PKG" > /dev/null; then
        verbose_echo "Package $REQUIRED_PKG not found. Installing..."
        brew install "$REQUIRED_PKG"
    else
        verbose_echo "Package $REQUIRED_PKG already installed! :)"
    fi
done

echo "Checking for possible library naming errors..."

# Use Homebrew’s prefix for library paths (typically /opt/homebrew on M1 Macs)
BREW_PREFIX=$(brew --prefix)
LIBS_DIR="$BREW_PREFIX/lib"

lib_lines=($(cat "$POSS_LIBS_FILE"))
for LIB_TO_FIND in "${lib_lines[@]}"; do
    # Get the base name by removing the last two characters
    base_lib="${LIB_TO_FIND:0:$(( ${#LIB_TO_FIND} - 2 ))}"
    
    # Look for any matching libraries in the brew lib directory
    LIB_SEARCH=$(find "$LIBS_DIR" -name "${base_lib}*")
    if [ -n "$LIB_SEARCH" ]; then
        verbose_echo "Base library exists: $base_lib... checking version"
        LIB_SEARCH=$(find "$LIBS_DIR" -name "$LIB_TO_FIND")
        if [ -n "$LIB_SEARCH" ]; then
            verbose_echo "Version matches :)"
        else
            verbose_echo "Version doesn't match, trying one version higher"
            # Calculate the library name with the last digit incremented
            prefix="${LIB_TO_FIND:0:$(( ${#LIB_TO_FIND} - 1 ))}"
            last_digit="${LIB_TO_FIND: -1}"
            LIB_UP_ONE_TO_FIND="${prefix}$((last_digit+1))"
            LIB_SEARCH=$(find "$LIBS_DIR" -name "$LIB_UP_ONE_TO_FIND")
            if [ -n "$LIB_SEARCH" ]; then
                verbose_echo "One version higher found... adding symbolic link."
                ln -s "$LIBS_DIR/$LIB_UP_ONE_TO_FIND" "$LIBS_DIR/$LIB_TO_FIND"
            else
                verbose_echo "$LIB_UP_ONE_TO_FIND not found! Check that the base lib ($base_lib) is installed!"
                exit 1
            fi
        fi 
    else
        verbose_echo "Base lib $base_lib not found! Find the package it’s included in and add it to $REQ_PCKGS_FILE"
        exit 1
    fi
done

echo "Setting up PostgreSQL..."

# Check if PostgreSQL is running using pg_isready
if ! pg_isready > /dev/null 2>&1; then
    verbose_echo "PostgreSQL not started... starting via Homebrew services"
    brew services start postgresql
fi
verbose_echo "PostgreSQL started! :)"

# Set up PostgreSQL server and database
DB_USER=$(sed -n '2p' "$USR_SETUP_FILE")
DB_PASS=$(sed -n '4p' "$USR_SETUP_FILE")
DB_NAME=$(sed -n '6p' "$USR_SETUP_FILE")

# Get the PostgreSQL port (assuming default installation)
DB_PORT=$(psql -t -c "SHOW port;" | xargs)

# Check if the database user exists
PG_USR_EXIST=$(psql -c '\du' | grep "$DB_USER")
if [ -z "$PG_USR_EXIST" ]; then
    verbose_echo "User $DB_USER not created! Creating user..."
    createuser "$DB_USER"
    psql $GEN_QUIET -c "ALTER USER $DB_USER WITH PASSWORD '$DB_PASS';"
else
    verbose_echo "User $DB_USER already exists! :)"
fi

# Check if user has CREATEDB permission
PG_USER_PERM=$(psql -t -c "\du" | grep "$DB_USER" | grep "Create")
if [ -z "$PG_USER_PERM" ]; then
    verbose_echo "User $DB_USER doesn't have CREATEDB permission! Adding..."
    psql $GEN_QUIET -c "ALTER USER $DB_USER CREATEDB;"
fi

# Check if the database exists
PG_DB_EXIST=$(psql -c "\l" | grep "$DB_NAME")
CREATE_DB=0
if [ -z "$PG_DB_EXIST" ]; then
    verbose_echo "Database ($DB_NAME) not created!"
    CREATE_DB=1
else
    PROMPT="Database ($DB_NAME) found! Would you like to reset the current database? (Enter \"Y\" to reset or \"n\" to keep it. Default is n)"
    echo "$PROMPT"
    while true; do
        read -rp "Enter Y or n (default n): " input
        if [[ "$input" == "Y" || "$input" == "n" || "$input" == "N" || "$input" == "" ]]; then
            break
        else
            verbose_echo "Invalid input. Please enter Y or n."
        fi
    done

    if [ "$input" = "Y" ]; then
        verbose_echo "Resetting database ($DB_NAME)! Deleting database..."
        dropdb "$DB_NAME"
        CREATE_DB=1
    fi
fi

if [ "$CREATE_DB" -eq 1 ]; then
    verbose_echo "Creating database..."
    createdb -O "$DB_USER" "$DB_NAME"
fi

echo "Setting up python environment..."

# (Re)create the virtual environment. If --clear isn’t supported, remove the env folder first.
if [ -d env ]; then
    rm -rf env
fi
python3 -m venv env

# shellcheck source=/dev/null
source env/bin/activate

# Install python packages
pip install -r "$PY_PCKGS_FILE" $GEN_QUIET

echo "Setting up prisma..."

DOT_ENV_FILE="$PROGRAM_DIR/.env"

verbose_echo "Setting up .env file..."
echo "DATABASE_URL=\"postgresql://$DB_USER:$DB_PASS@localhost:$DB_PORT/$DB_NAME?schema=public\"" > "$DOT_ENV_FILE"

my_prisma generate

MIGRATIONS_DIR="$PROGRAM_DIR/prisma/migrations"

if [ "$CREATE_DB" -eq 1 ]; then
    if [ -d "$MIGRATIONS_DIR" ]; then
        verbose_echo "Removing migrations directory..."
        rm -rf "$MIGRATIONS_DIR"
    fi
    verbose_echo "Migrating with prisma..."
    my_prisma migrate dev --name init
fi

deactivate

echo "Setup completed! :)"
