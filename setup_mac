#!/bin/zsh
# This script has been adapted for macOS (M1 Max) using zsh and Homebrew.

# Function to print verbose output
verbose_echo() {
    if [ "$VERBOSE" -eq 1 ]; then
        echo "$1"
    fi
}

my_prisma() {
    cd "$PROGRAM_DIR"
    CMD="prisma $@"
    if [ "$VERBOSE" -eq 0 ]; then
        CMD="$CMD > /dev/null"
    fi
    eval "$CMD"
    cd "$ROOT_DIR"
}

# Default value for verbose mode (false)
VERBOSE=0
BREW_QUIET=""
GEN_QUIET="--quiet"
PRISMA_QUIET=""

# Parse command-line arguments for verbose flag
for arg in "$@"; do
    case $arg in
        -v|--verbose)
            VERBOSE=1
            BREW_QUIET=""
            GEN_QUIET=""
            PRISMA_QUIET=""
            shift
            ;;
    esac
done

ROOT_DIR=$(pwd)
PROGRAM_DIR="$ROOT_DIR/NestUi"
SETUP_IN_DIR="$ROOT_DIR/setup_in"
SETUP_OUT_DIR="$ROOT_DIR/setup_out"

REQ_PCKGS_FILE="$SETUP_IN_DIR/required_mac_packages.txt"
POSS_LIBS_FILE="$SETUP_IN_DIR/possible_libs_not_found.txt"
USR_SETUP_FILE="$SETUP_IN_DIR/postgres_burd_db_settings.txt"
PY_PCKGS_FILE="$SETUP_IN_DIR/nestui_py_requirements.txt"

echo "Installing required packages..."

# Update Homebrew package lists
brew update

# Ensure dos2unix is installed (it’s available via Homebrew)
if ! brew ls --versions dos2unix > /dev/null; then
    verbose_echo "dos2unix not found. Installing dos2unix."
    brew install dos2unix
else
    verbose_echo "dos2unix already installed! :)"
fi

# Convert file line endings
dos2unix $GEN_QUIET "$REQ_PCKGS_FILE"
dos2unix $GEN_QUIET "$POSS_LIBS_FILE"

# Install required Homebrew packages
req_packages=($(cat "$REQ_PCKGS_FILE"))
for REQUIRED_PKG in "${req_packages[@]}"; do
    if ! brew ls --versions "$REQUIRED_PKG" > /dev/null; then
        verbose_echo "Package $REQUIRED_PKG not found. Installing..."
        brew install "$REQUIRED_PKG"
    else
        verbose_echo "Package $REQUIRED_PKG already installed! :)"
    fi
done

# echo "Checking for possible library naming errors..."

# BREW_PREFIX=$(brew --prefix)
# LIBS_DIR="$BREW_PREFIX/lib"

# lib_lines=($(cat "$POSS_LIBS_FILE"))
# for LIB_TO_FIND in "${lib_lines[@]}"; do
#     base_lib="${LIB_TO_FIND:0:$(( ${#LIB_TO_FIND} - 2 ))}"
#     LIB_SEARCH=$(find "$LIBS_DIR" -name "${base_lib}*")
#     if [ -n "$LIB_SEARCH" ]; then
#         verbose_echo "Base library exists: $base_lib... checking version"
#         LIB_SEARCH=$(find "$LIBS_DIR" -name "$LIB_TO_FIND")
#         if [ -n "$LIB_SEARCH" ]; then
#             verbose_echo "Version matches :)"
#         else
#             verbose_echo "Version doesn't match, trying one version higher"
#             prefix="${LIB_TO_FIND:0:$(( ${#LIB_TO_FIND} - 1 ))}"
#             last_digit="${LIB_TO_FIND: -1}"
#             LIB_UP_ONE_TO_FIND="${prefix}$((last_digit+1))"
#             LIB_SEARCH=$(find "$LIBS_DIR" -name "$LIB_UP_ONE_TO_FIND")
#             if [ -n "$LIB_SEARCH" ]; then
#                 verbose_echo "One version higher found... adding symbolic link."
#                 ln -s "$LIBS_DIR/$LIB_UP_ONE_TO_FIND" "$LIBS_DIR/$LIB_TO_FIND"
#             else
#                 verbose_echo "$LIB_UP_ONE_TO_FIND not found! Check that the base lib ($base_lib) is installed!"
#                 exit 1
#             fi
#         fi 
#     else
#         verbose_echo "Base lib $base_lib not found! Find the package it’s included in and add it to $REQ_PCKGS_FILE"
#         exit 1
#     fi
# done

echo "Setting up PostgreSQL..."

# Ensure PostgreSQL is installed and running
if ! brew ls --versions postgresql@14 > /dev/null; then
    verbose_echo "PostgreSQL not found. Installing..."
    brew install postgresql@14
    brew services start postgresql@14
else
    verbose_echo "PostgreSQL already installed! :)"
fi

# Check if PostgreSQL is running
if ! pg_isready > /dev/null 2>&1; then
    verbose_echo "PostgreSQL not started... starting via Homebrew services"
    brew services start postgresql@14
fi
verbose_echo "PostgreSQL started! :)"

## Set up PostgreSQL server and database
DB_USER=$(sed -n '2p' "$USR_SETUP_FILE")
DB_PASS=$(sed -n '4p' "$USR_SETUP_FILE")
DB_NAME=$(sed -n '6p' "$USR_SETUP_FILE")

# Connect to the default "postgres" database to run administrative queries.
DB_PORT=$(psql -d postgres -t -c "SHOW port;" | xargs)

# Check if the database user exists
PG_USR_EXIST=$(psql -d postgres -c '\du' | grep "$DB_USER")
if [ -z "$PG_USR_EXIST" ]; then
    verbose_echo "User $DB_USER not created! Creating user..."
    createuser "$DB_USER"
    psql -d postgres $GEN_QUIET -c "ALTER USER $DB_USER WITH PASSWORD '$DB_PASS';"
else
    verbose_echo "User $DB_USER already exists! :)"
fi

# Grant necessary permissions
PG_USER_PERM=$(psql -d postgres -t -c "\du" | grep "$DB_USER" | grep "Create")
if [ -z "$PG_USER_PERM" ]; then
    verbose_echo "User $DB_USER doesn't have CREATEDB permission! Adding..."
    psql -d postgres $GEN_QUIET -c "ALTER USER $DB_USER CREATEDB;"
fi

# Check if the target database exists
PG_DB_EXIST=$(psql -d postgres -c "\l" | grep "$DB_NAME")
if [ -z "$PG_DB_EXIST" ]; then
    verbose_echo "Database ($DB_NAME) not created! Creating now..."
    createdb -O "$DB_USER" "$DB_NAME"
fi

echo "Setting up Python environment..."

# Ensure Homebrew Python is installed
if ! brew ls --versions python@3.11 > /dev/null; then
    brew install python@3.11
fi

if [ -d env ]; then
    rm -rf env
fi
python3 -m venv env
source env/bin/activate
pip install -r "$PY_PCKGS_FILE" $GEN_QUIET

echo "Setting up Prisma..."
DOT_ENV_FILE="$PROGRAM_DIR/.env"
echo "DATABASE_URL=\"postgresql://$DB_USER:$DB_PASS@localhost:$DB_PORT/$DB_NAME?schema=public\"" > "$DOT_ENV_FILE"

my_prisma generate

MIGRATIONS_DIR="$PROGRAM_DIR/prisma/migrations"
if [ ! -d "$MIGRATIONS_DIR" ]; then
    my_prisma migrate dev --name init
fi

deactivate
echo "Setup completed! :)"